/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 2389.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 2.0], [3.1, 2.0], [3.2, 2.0], [3.3, 2.0], [3.4, 2.0], [3.5, 2.0], [3.6, 2.0], [3.7, 2.0], [3.8, 2.0], [3.9, 2.0], [4.0, 2.0], [4.1, 2.0], [4.2, 2.0], [4.3, 2.0], [4.4, 2.0], [4.5, 2.0], [4.6, 2.0], [4.7, 2.0], [4.8, 2.0], [4.9, 2.0], [5.0, 2.0], [5.1, 2.0], [5.2, 2.0], [5.3, 2.0], [5.4, 2.0], [5.5, 2.0], [5.6, 2.0], [5.7, 2.0], [5.8, 2.0], [5.9, 2.0], [6.0, 2.0], [6.1, 2.0], [6.2, 2.0], [6.3, 2.0], [6.4, 2.0], [6.5, 2.0], [6.6, 2.0], [6.7, 2.0], [6.8, 3.0], [6.9, 3.0], [7.0, 3.0], [7.1, 3.0], [7.2, 3.0], [7.3, 3.0], [7.4, 3.0], [7.5, 3.0], [7.6, 3.0], [7.7, 3.0], [7.8, 3.0], [7.9, 3.0], [8.0, 4.0], [8.1, 4.0], [8.2, 4.0], [8.3, 4.0], [8.4, 4.0], [8.5, 4.0], [8.6, 4.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 9.0], [11.4, 9.0], [11.5, 9.0], [11.6, 9.0], [11.7, 9.0], [11.8, 9.0], [11.9, 9.0], [12.0, 10.0], [12.1, 10.0], [12.2, 10.0], [12.3, 10.0], [12.4, 10.0], [12.5, 10.0], [12.6, 10.0], [12.7, 10.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 12.0], [13.5, 12.0], [13.6, 12.0], [13.7, 12.0], [13.8, 12.0], [13.9, 12.0], [14.0, 12.0], [14.1, 13.0], [14.2, 13.0], [14.3, 13.0], [14.4, 13.0], [14.5, 13.0], [14.6, 13.0], [14.7, 13.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 16.0], [16.5, 16.0], [16.6, 16.0], [16.7, 16.0], [16.8, 16.0], [16.9, 16.0], [17.0, 17.0], [17.1, 17.0], [17.2, 17.0], [17.3, 17.0], [17.4, 17.0], [17.5, 17.0], [17.6, 17.0], [17.7, 18.0], [17.8, 18.0], [17.9, 18.0], [18.0, 18.0], [18.1, 18.0], [18.2, 18.0], [18.3, 18.0], [18.4, 18.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 19.0], [19.0, 19.0], [19.1, 19.0], [19.2, 20.0], [19.3, 20.0], [19.4, 20.0], [19.5, 20.0], [19.6, 20.0], [19.7, 20.0], [19.8, 20.0], [19.9, 20.0], [20.0, 21.0], [20.1, 21.0], [20.2, 21.0], [20.3, 21.0], [20.4, 21.0], [20.5, 21.0], [20.6, 21.0], [20.7, 21.0], [20.8, 21.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 22.0], [21.5, 22.0], [21.6, 23.0], [21.7, 23.0], [21.8, 23.0], [21.9, 23.0], [22.0, 23.0], [22.1, 24.0], [22.2, 24.0], [22.3, 24.0], [22.4, 24.0], [22.5, 24.0], [22.6, 24.0], [22.7, 24.0], [22.8, 25.0], [22.9, 25.0], [23.0, 25.0], [23.1, 25.0], [23.2, 25.0], [23.3, 26.0], [23.4, 26.0], [23.5, 26.0], [23.6, 26.0], [23.7, 26.0], [23.8, 27.0], [23.9, 27.0], [24.0, 27.0], [24.1, 27.0], [24.2, 27.0], [24.3, 27.0], [24.4, 27.0], [24.5, 27.0], [24.6, 28.0], [24.7, 28.0], [24.8, 28.0], [24.9, 28.0], [25.0, 28.0], [25.1, 28.0], [25.2, 29.0], [25.3, 29.0], [25.4, 29.0], [25.5, 29.0], [25.6, 29.0], [25.7, 29.0], [25.8, 29.0], [25.9, 30.0], [26.0, 30.0], [26.1, 30.0], [26.2, 30.0], [26.3, 30.0], [26.4, 30.0], [26.5, 31.0], [26.6, 31.0], [26.7, 31.0], [26.8, 31.0], [26.9, 31.0], [27.0, 31.0], [27.1, 32.0], [27.2, 32.0], [27.3, 32.0], [27.4, 32.0], [27.5, 32.0], [27.6, 32.0], [27.7, 33.0], [27.8, 33.0], [27.9, 33.0], [28.0, 33.0], [28.1, 33.0], [28.2, 34.0], [28.3, 34.0], [28.4, 34.0], [28.5, 34.0], [28.6, 34.0], [28.7, 34.0], [28.8, 34.0], [28.9, 35.0], [29.0, 35.0], [29.1, 35.0], [29.2, 35.0], [29.3, 35.0], [29.4, 36.0], [29.5, 36.0], [29.6, 36.0], [29.7, 36.0], [29.8, 36.0], [29.9, 37.0], [30.0, 37.0], [30.1, 37.0], [30.2, 37.0], [30.3, 38.0], [30.4, 38.0], [30.5, 38.0], [30.6, 38.0], [30.7, 38.0], [30.8, 38.0], [30.9, 39.0], [31.0, 39.0], [31.1, 39.0], [31.2, 39.0], [31.3, 40.0], [31.4, 40.0], [31.5, 40.0], [31.6, 41.0], [31.7, 41.0], [31.8, 42.0], [31.9, 42.0], [32.0, 42.0], [32.1, 42.0], [32.2, 43.0], [32.3, 43.0], [32.4, 44.0], [32.5, 44.0], [32.6, 44.0], [32.7, 44.0], [32.8, 45.0], [32.9, 45.0], [33.0, 45.0], [33.1, 46.0], [33.2, 46.0], [33.3, 46.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 47.0], [33.8, 48.0], [33.9, 48.0], [34.0, 48.0], [34.1, 49.0], [34.2, 49.0], [34.3, 49.0], [34.4, 49.0], [34.5, 49.0], [34.6, 50.0], [34.7, 50.0], [34.8, 50.0], [34.9, 50.0], [35.0, 51.0], [35.1, 51.0], [35.2, 51.0], [35.3, 52.0], [35.4, 52.0], [35.5, 52.0], [35.6, 52.0], [35.7, 53.0], [35.8, 53.0], [35.9, 53.0], [36.0, 53.0], [36.1, 54.0], [36.2, 54.0], [36.3, 54.0], [36.4, 54.0], [36.5, 55.0], [36.6, 55.0], [36.7, 55.0], [36.8, 55.0], [36.9, 55.0], [37.0, 55.0], [37.1, 55.0], [37.2, 56.0], [37.3, 56.0], [37.4, 56.0], [37.5, 57.0], [37.6, 57.0], [37.7, 57.0], [37.8, 57.0], [37.9, 58.0], [38.0, 58.0], [38.1, 58.0], [38.2, 58.0], [38.3, 58.0], [38.4, 59.0], [38.5, 59.0], [38.6, 59.0], [38.7, 59.0], [38.8, 60.0], [38.9, 60.0], [39.0, 61.0], [39.1, 61.0], [39.2, 61.0], [39.3, 62.0], [39.4, 62.0], [39.5, 62.0], [39.6, 63.0], [39.7, 63.0], [39.8, 63.0], [39.9, 64.0], [40.0, 64.0], [40.1, 64.0], [40.2, 65.0], [40.3, 65.0], [40.4, 65.0], [40.5, 66.0], [40.6, 66.0], [40.7, 67.0], [40.8, 67.0], [40.9, 68.0], [41.0, 68.0], [41.1, 68.0], [41.2, 69.0], [41.3, 69.0], [41.4, 69.0], [41.5, 69.0], [41.6, 70.0], [41.7, 70.0], [41.8, 71.0], [41.9, 71.0], [42.0, 71.0], [42.1, 71.0], [42.2, 71.0], [42.3, 72.0], [42.4, 72.0], [42.5, 72.0], [42.6, 73.0], [42.7, 73.0], [42.8, 73.0], [42.9, 74.0], [43.0, 74.0], [43.1, 74.0], [43.2, 75.0], [43.3, 75.0], [43.4, 75.0], [43.5, 76.0], [43.6, 76.0], [43.7, 76.0], [43.8, 77.0], [43.9, 77.0], [44.0, 77.0], [44.1, 78.0], [44.2, 78.0], [44.3, 79.0], [44.4, 79.0], [44.5, 79.0], [44.6, 79.0], [44.7, 80.0], [44.8, 80.0], [44.9, 80.0], [45.0, 80.0], [45.1, 80.0], [45.2, 81.0], [45.3, 81.0], [45.4, 82.0], [45.5, 83.0], [45.6, 83.0], [45.7, 83.0], [45.8, 84.0], [45.9, 84.0], [46.0, 85.0], [46.1, 85.0], [46.2, 86.0], [46.3, 87.0], [46.4, 87.0], [46.5, 88.0], [46.6, 88.0], [46.7, 89.0], [46.8, 90.0], [46.9, 90.0], [47.0, 90.0], [47.1, 90.0], [47.2, 91.0], [47.3, 91.0], [47.4, 91.0], [47.5, 92.0], [47.6, 92.0], [47.7, 93.0], [47.8, 93.0], [47.9, 93.0], [48.0, 94.0], [48.1, 94.0], [48.2, 94.0], [48.3, 94.0], [48.4, 95.0], [48.5, 96.0], [48.6, 96.0], [48.7, 96.0], [48.8, 97.0], [48.9, 97.0], [49.0, 98.0], [49.1, 98.0], [49.2, 99.0], [49.3, 100.0], [49.4, 101.0], [49.5, 101.0], [49.6, 101.0], [49.7, 102.0], [49.8, 102.0], [49.9, 102.0], [50.0, 103.0], [50.1, 104.0], [50.2, 105.0], [50.3, 106.0], [50.4, 106.0], [50.5, 106.0], [50.6, 106.0], [50.7, 106.0], [50.8, 107.0], [50.9, 107.0], [51.0, 108.0], [51.1, 109.0], [51.2, 109.0], [51.3, 110.0], [51.4, 111.0], [51.5, 113.0], [51.6, 113.0], [51.7, 115.0], [51.8, 115.0], [51.9, 116.0], [52.0, 117.0], [52.1, 117.0], [52.2, 118.0], [52.3, 118.0], [52.4, 119.0], [52.5, 119.0], [52.6, 119.0], [52.7, 120.0], [52.8, 121.0], [52.9, 121.0], [53.0, 121.0], [53.1, 122.0], [53.2, 123.0], [53.3, 123.0], [53.4, 124.0], [53.5, 124.0], [53.6, 125.0], [53.7, 126.0], [53.8, 126.0], [53.9, 127.0], [54.0, 128.0], [54.1, 128.0], [54.2, 128.0], [54.3, 129.0], [54.4, 129.0], [54.5, 130.0], [54.6, 130.0], [54.7, 131.0], [54.8, 131.0], [54.9, 132.0], [55.0, 133.0], [55.1, 133.0], [55.2, 133.0], [55.3, 134.0], [55.4, 135.0], [55.5, 136.0], [55.6, 137.0], [55.7, 138.0], [55.8, 138.0], [55.9, 138.0], [56.0, 139.0], [56.1, 139.0], [56.2, 140.0], [56.3, 140.0], [56.4, 141.0], [56.5, 142.0], [56.6, 142.0], [56.7, 142.0], [56.8, 143.0], [56.9, 143.0], [57.0, 143.0], [57.1, 144.0], [57.2, 144.0], [57.3, 144.0], [57.4, 145.0], [57.5, 145.0], [57.6, 145.0], [57.7, 145.0], [57.8, 146.0], [57.9, 146.0], [58.0, 146.0], [58.1, 146.0], [58.2, 146.0], [58.3, 147.0], [58.4, 147.0], [58.5, 147.0], [58.6, 147.0], [58.7, 148.0], [58.8, 149.0], [58.9, 149.0], [59.0, 150.0], [59.1, 150.0], [59.2, 150.0], [59.3, 151.0], [59.4, 152.0], [59.5, 152.0], [59.6, 152.0], [59.7, 153.0], [59.8, 153.0], [59.9, 154.0], [60.0, 154.0], [60.1, 154.0], [60.2, 155.0], [60.3, 155.0], [60.4, 156.0], [60.5, 156.0], [60.6, 156.0], [60.7, 157.0], [60.8, 157.0], [60.9, 158.0], [61.0, 158.0], [61.1, 158.0], [61.2, 159.0], [61.3, 159.0], [61.4, 160.0], [61.5, 160.0], [61.6, 160.0], [61.7, 161.0], [61.8, 161.0], [61.9, 161.0], [62.0, 162.0], [62.1, 162.0], [62.2, 162.0], [62.3, 162.0], [62.4, 163.0], [62.5, 163.0], [62.6, 163.0], [62.7, 163.0], [62.8, 164.0], [62.9, 164.0], [63.0, 164.0], [63.1, 164.0], [63.2, 165.0], [63.3, 165.0], [63.4, 166.0], [63.5, 166.0], [63.6, 167.0], [63.7, 167.0], [63.8, 167.0], [63.9, 167.0], [64.0, 168.0], [64.1, 168.0], [64.2, 169.0], [64.3, 170.0], [64.4, 170.0], [64.5, 170.0], [64.6, 171.0], [64.7, 171.0], [64.8, 171.0], [64.9, 172.0], [65.0, 172.0], [65.1, 172.0], [65.2, 173.0], [65.3, 173.0], [65.4, 174.0], [65.5, 174.0], [65.6, 175.0], [65.7, 175.0], [65.8, 175.0], [65.9, 175.0], [66.0, 176.0], [66.1, 176.0], [66.2, 177.0], [66.3, 178.0], [66.4, 178.0], [66.5, 179.0], [66.6, 179.0], [66.7, 180.0], [66.8, 180.0], [66.9, 180.0], [67.0, 181.0], [67.1, 181.0], [67.2, 181.0], [67.3, 181.0], [67.4, 182.0], [67.5, 182.0], [67.6, 183.0], [67.7, 184.0], [67.8, 184.0], [67.9, 185.0], [68.0, 185.0], [68.1, 186.0], [68.2, 187.0], [68.3, 187.0], [68.4, 189.0], [68.5, 190.0], [68.6, 191.0], [68.7, 192.0], [68.8, 192.0], [68.9, 193.0], [69.0, 194.0], [69.1, 195.0], [69.2, 196.0], [69.3, 197.0], [69.4, 198.0], [69.5, 198.0], [69.6, 198.0], [69.7, 198.0], [69.8, 199.0], [69.9, 199.0], [70.0, 200.0], [70.1, 200.0], [70.2, 200.0], [70.3, 201.0], [70.4, 201.0], [70.5, 201.0], [70.6, 201.0], [70.7, 202.0], [70.8, 202.0], [70.9, 203.0], [71.0, 204.0], [71.1, 204.0], [71.2, 205.0], [71.3, 206.0], [71.4, 207.0], [71.5, 208.0], [71.6, 208.0], [71.7, 211.0], [71.8, 212.0], [71.9, 213.0], [72.0, 216.0], [72.1, 219.0], [72.2, 221.0], [72.3, 225.0], [72.4, 227.0], [72.5, 229.0], [72.6, 230.0], [72.7, 232.0], [72.8, 233.0], [72.9, 233.0], [73.0, 235.0], [73.1, 235.0], [73.2, 235.0], [73.3, 238.0], [73.4, 240.0], [73.5, 248.0], [73.6, 259.0], [73.7, 263.0], [73.8, 271.0], [73.9, 276.0], [74.0, 285.0], [74.1, 290.0], [74.2, 298.0], [74.3, 307.0], [74.4, 383.0], [74.5, 399.0], [74.6, 413.0], [74.7, 424.0], [74.8, 438.0], [74.9, 449.0], [75.0, 459.0], [75.1, 470.0], [75.2, 776.0], [75.3, 841.0], [75.4, 878.0], [75.5, 892.0], [75.6, 911.0], [75.7, 916.0], [75.8, 920.0], [75.9, 929.0], [76.0, 934.0], [76.1, 942.0], [76.2, 949.0], [76.3, 957.0], [76.4, 961.0], [76.5, 967.0], [76.6, 970.0], [76.7, 972.0], [76.8, 977.0], [76.9, 988.0], [77.0, 995.0], [77.1, 1002.0], [77.2, 1007.0], [77.3, 1019.0], [77.4, 1026.0], [77.5, 1034.0], [77.6, 1041.0], [77.7, 1050.0], [77.8, 1057.0], [77.9, 1059.0], [78.0, 1062.0], [78.1, 1064.0], [78.2, 1068.0], [78.3, 1074.0], [78.4, 1077.0], [78.5, 1082.0], [78.6, 1087.0], [78.7, 1092.0], [78.8, 1099.0], [78.9, 1104.0], [79.0, 1110.0], [79.1, 1113.0], [79.2, 1115.0], [79.3, 1124.0], [79.4, 1128.0], [79.5, 1138.0], [79.6, 1145.0], [79.7, 1147.0], [79.8, 1152.0], [79.9, 1158.0], [80.0, 1165.0], [80.1, 1168.0], [80.2, 1174.0], [80.3, 1179.0], [80.4, 1189.0], [80.5, 1194.0], [80.6, 1198.0], [80.7, 1199.0], [80.8, 1220.0], [80.9, 1224.0], [81.0, 1239.0], [81.1, 1255.0], [81.2, 1274.0], [81.3, 1276.0], [81.4, 1276.0], [81.5, 1279.0], [81.6, 1288.0], [81.7, 1309.0], [81.8, 1334.0], [81.9, 1341.0], [82.0, 1342.0], [82.1, 1345.0], [82.2, 1363.0], [82.3, 1407.0], [82.4, 1442.0], [82.5, 1454.0], [82.6, 1472.0], [82.7, 1485.0], [82.8, 1494.0], [82.9, 1504.0], [83.0, 1508.0], [83.1, 1516.0], [83.2, 1524.0], [83.3, 1528.0], [83.4, 1533.0], [83.5, 1537.0], [83.6, 1543.0], [83.7, 1547.0], [83.8, 1554.0], [83.9, 1557.0], [84.0, 1558.0], [84.1, 1559.0], [84.2, 1561.0], [84.3, 1562.0], [84.4, 1569.0], [84.5, 1571.0], [84.6, 1579.0], [84.7, 1582.0], [84.8, 1585.0], [84.9, 1586.0], [85.0, 1589.0], [85.1, 1594.0], [85.2, 1597.0], [85.3, 1599.0], [85.4, 1601.0], [85.5, 1604.0], [85.6, 1605.0], [85.7, 1608.0], [85.8, 1610.0], [85.9, 1612.0], [86.0, 1616.0], [86.1, 1619.0], [86.2, 1622.0], [86.3, 1625.0], [86.4, 1628.0], [86.5, 1630.0], [86.6, 1633.0], [86.7, 1636.0], [86.8, 1639.0], [86.9, 1641.0], [87.0, 1643.0], [87.1, 1644.0], [87.2, 1646.0], [87.3, 1649.0], [87.4, 1652.0], [87.5, 1653.0], [87.6, 1655.0], [87.7, 1661.0], [87.8, 1663.0], [87.9, 1664.0], [88.0, 1664.0], [88.1, 1667.0], [88.2, 1668.0], [88.3, 1669.0], [88.4, 1671.0], [88.5, 1674.0], [88.6, 1676.0], [88.7, 1679.0], [88.8, 1681.0], [88.9, 1684.0], [89.0, 1689.0], [89.1, 1690.0], [89.2, 1693.0], [89.3, 1696.0], [89.4, 1698.0], [89.5, 1701.0], [89.6, 1704.0], [89.7, 1708.0], [89.8, 1710.0], [89.9, 1712.0], [90.0, 1715.0], [90.1, 1720.0], [90.2, 1727.0], [90.3, 1731.0], [90.4, 1736.0], [90.5, 1741.0], [90.6, 1746.0], [90.7, 1751.0], [90.8, 1753.0], [90.9, 1760.0], [91.0, 1770.0], [91.1, 1786.0], [91.2, 1801.0], [91.3, 1808.0], [91.4, 1832.0], [91.5, 1836.0], [91.6, 1852.0], [91.7, 1870.0], [91.8, 1878.0], [91.9, 1888.0], [92.0, 1899.0], [92.1, 1918.0], [92.2, 1929.0], [92.3, 1938.0], [92.4, 1943.0], [92.5, 1955.0], [92.6, 1960.0], [92.7, 1968.0], [92.8, 1973.0], [92.9, 1978.0], [93.0, 1981.0], [93.1, 1985.0], [93.2, 1988.0], [93.3, 1990.0], [93.4, 1992.0], [93.5, 1993.0], [93.6, 1994.0], [93.7, 1999.0], [93.8, 2005.0], [93.9, 2014.0], [94.0, 2017.0], [94.1, 2022.0], [94.2, 2023.0], [94.3, 2027.0], [94.4, 2028.0], [94.5, 2033.0], [94.6, 2038.0], [94.7, 2044.0], [94.8, 2046.0], [94.9, 2047.0], [95.0, 2048.0], [95.1, 2050.0], [95.2, 2054.0], [95.3, 2057.0], [95.4, 2062.0], [95.5, 2066.0], [95.6, 2070.0], [95.7, 2075.0], [95.8, 2080.0], [95.9, 2082.0], [96.0, 2084.0], [96.1, 2088.0], [96.2, 2093.0], [96.3, 2094.0], [96.4, 2096.0], [96.5, 2102.0], [96.6, 2106.0], [96.7, 2112.0], [96.8, 2121.0], [96.9, 2128.0], [97.0, 2130.0], [97.1, 2135.0], [97.2, 2139.0], [97.3, 2145.0], [97.4, 2153.0], [97.5, 2160.0], [97.6, 2164.0], [97.7, 2166.0], [97.8, 2169.0], [97.9, 2170.0], [98.0, 2176.0], [98.1, 2183.0], [98.2, 2188.0], [98.3, 2191.0], [98.4, 2196.0], [98.5, 2201.0], [98.6, 2205.0], [98.7, 2213.0], [98.8, 2217.0], [98.9, 2226.0], [99.0, 2233.0], [99.1, 2242.0], [99.2, 2264.0], [99.3, 2282.0], [99.4, 2290.0], [99.5, 2303.0], [99.6, 2326.0], [99.7, 2331.0], [99.8, 2338.0], [99.9, 2378.0]], "isOverall": false, "label": "number conversion api", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 2462.0, "series": [{"data": [[0.0, 2462.0], [2100.0, 101.0], [2200.0, 51.0], [2300.0, 25.0], [700.0, 2.0], [200.0, 212.0], [800.0, 14.0], [900.0, 77.0], [1000.0, 90.0], [1100.0, 93.0], [300.0, 15.0], [1200.0, 49.0], [1300.0, 28.0], [1400.0, 31.0], [1500.0, 123.0], [400.0, 34.0], [100.0, 1037.0], [1600.0, 208.0], [1700.0, 84.0], [1800.0, 42.0], [1900.0, 85.0], [2000.0, 137.0]], "isOverall": false, "label": "number conversion api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3730.0, "series": [{"data": [[0.0, 3730.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 385.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 855.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 30.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 359.4322000000014, "minX": 1.592871E12, "maxY": 359.4322000000014, "series": [{"data": [[1.592871E12, 359.4322000000014]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.592871E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 2292.0, "series": [{"data": [[2.0, 2.407407407407408], [3.0, 2.207317073170731], [4.0, 7.033707865168538], [5.0, 8.134328358208956], [6.0, 5.6438356164383565], [7.0, 14.936170212765962], [8.0, 14.75862068965517], [9.0, 10.913043478260871], [10.0, 38.33333333333333], [11.0, 18.266666666666666], [12.0, 25.466666666666665], [13.0, 20.28125], [14.0, 35.00000000000001], [15.0, 29.47619047619048], [16.0, 19.8125], [17.0, 22.357142857142858], [18.0, 21.91428571428571], [19.0, 40.239999999999995], [20.0, 21.37837837837838], [21.0, 13.200000000000003], [22.0, 25.636363636363637], [23.0, 42.684210526315795], [24.0, 31.73684210526316], [25.0, 38.114285714285714], [26.0, 23.533333333333335], [27.0, 34.77777777777777], [28.0, 68.7], [29.0, 36.93333333333333], [30.0, 34.81481481481482], [31.0, 22.75], [33.0, 31.4375], [32.0, 33.96296296296296], [35.0, 36.888888888888886], [34.0, 71.28571428571429], [36.0, 29.312499999999996], [37.0, 57.71428571428571], [39.0, 35.375], [38.0, 57.214285714285715], [41.0, 163.35000000000002], [40.0, 20.0], [43.0, 288.84615384615387], [42.0, 21.388888888888886], [45.0, 170.76470588235293], [44.0, 37.6875], [46.0, 34.24137931034483], [47.0, 46.42857142857142], [49.0, 299.625], [48.0, 154.22727272727275], [51.0, 259.6666666666667], [50.0, 172.2222222222222], [53.0, 328.04999999999995], [52.0, 41.333333333333336], [55.0, 177.49999999999994], [54.0, 140.95], [56.0, 323.25], [57.0, 70.83333333333333], [58.0, 142.2307692307692], [59.0, 71.6923076923077], [61.0, 428.2727272727272], [60.0, 640.4545454545456], [62.0, 277.12], [63.0, 272.0000000000001], [66.0, 461.38888888888886], [67.0, 381.40000000000003], [64.0, 139.92857142857144], [65.0, 516.4999999999999], [70.0, 130.27777777777777], [69.0, 278.22222222222223], [68.0, 426.4666666666667], [71.0, 45.388888888888886], [75.0, 175.875], [74.0, 39.4], [73.0, 45.75], [72.0, 139.0], [79.0, 414.3333333333333], [77.0, 205.625], [76.0, 66.47058823529412], [78.0, 61.5], [82.0, 185.44444444444446], [80.0, 52.458333333333336], [81.0, 68.4], [83.0, 80.375], [87.0, 877.0], [85.0, 253.52941176470588], [86.0, 70.17647058823529], [91.0, 145.63157894736838], [88.0, 246.1176470588235], [90.0, 61.63636363636365], [89.0, 83.4], [95.0, 293.44444444444446], [94.0, 29.5], [92.0, 218.4], [93.0, 160.5], [99.0, 1155.5238095238094], [98.0, 957.1428571428573], [97.0, 204.11111111111114], [96.0, 103.36363636363636], [103.0, 505.09999999999997], [101.0, 658.0], [100.0, 509.91666666666663], [102.0, 521.0666666666667], [107.0, 275.8], [106.0, 120.0], [104.0, 674.75], [105.0, 110.25], [111.0, 193.5], [110.0, 402.6666666666667], [109.0, 324.49999999999994], [108.0, 225.14285714285714], [115.0, 52.27272727272727], [114.0, 87.4], [113.0, 94.5], [112.0, 52.69696969696969], [117.0, 85.20183486238535], [119.0, 88.26190476190482], [118.0, 86.26666666666667], [116.0, 64.25], [121.0, 349.0], [122.0, 131.5], [120.0, 81.0], [123.0, 128.0], [124.0, 117.33333333333334], [127.0, 40.0], [125.0, 155.2], [126.0, 148.0], [130.0, 57.666666666666664], [131.0, 38.882352941176464], [134.0, 76.66666666666667], [133.0, 85.375], [132.0, 66.16666666666667], [135.0, 54.077777777777776], [128.0, 140.11111111111111], [129.0, 88.57142857142857], [138.0, 510.4], [141.0, 125.5], [137.0, 48.285714285714285], [136.0, 113.92857142857143], [143.0, 90.85714285714286], [142.0, 102.45454545454545], [140.0, 97.25], [139.0, 97.4], [144.0, 91.5], [146.0, 118.1], [151.0, 58.333333333333336], [150.0, 50.0], [149.0, 64.66666666666667], [147.0, 83.66666666666666], [145.0, 92.25], [148.0, 122.125], [152.0, 265.3333333333334], [154.0, 85.76923076923076], [153.0, 61.63636363636364], [158.0, 109.75], [157.0, 46.5], [156.0, 39.5], [159.0, 116.9090909090909], [155.0, 84.0], [162.0, 69.18181818181817], [160.0, 69.62499999999999], [166.0, 79.5], [165.0, 102.8], [161.0, 98.66666666666667], [164.0, 82.66666666666667], [167.0, 142.33333333333334], [163.0, 151.0], [168.0, 785.6666666666667], [171.0, 93.44444444444444], [172.0, 152.5], [170.0, 128.0], [173.0, 98.0], [181.0, 1159.0], [182.0, 167.75], [177.0, 140.33333333333331], [183.0, 103.0], [180.0, 80.0], [178.0, 100.75], [184.0, 449.66666666666663], [191.0, 156.0], [189.0, 147.33333333333334], [187.0, 172.33333333333334], [188.0, 106.0], [198.0, 2219.0], [195.0, 784.3333333333333], [197.0, 133.2], [194.0, 146.5], [193.0, 121.6], [192.0, 157.0], [204.0, 2122.0], [207.0, 176.0], [205.0, 159.5], [203.0, 151.6], [200.0, 167.33333333333334], [206.0, 116.5], [201.0, 110.25], [213.0, 304.14285714285717], [212.0, 185.0], [209.0, 185.0], [214.0, 89.0], [208.0, 118.0], [222.0, 167.0], [221.0, 131.0], [219.0, 131.0], [217.0, 147.57142857142858], [223.0, 123.66666666666667], [227.0, 831.6666666666667], [230.0, 152.66666666666669], [225.0, 157.5], [224.0, 129.0], [231.0, 128.5], [226.0, 99.5], [238.0, 2161.0], [239.0, 163.33333333333334], [236.0, 162.0], [234.0, 168.5], [237.0, 133.0], [235.0, 129.75], [232.0, 130.0], [243.0, 410.375], [247.0, 175.5], [246.0, 191.0], [245.0, 142.5], [240.0, 90.66666666666667], [253.0, 1156.5], [255.0, 159.33333333333334], [252.0, 154.33333333333334], [249.0, 154.0], [254.0, 95.66666666666667], [250.0, 147.66666666666666], [268.0, 298.875], [261.0, 594.25], [260.0, 124.75], [262.0, 87.0], [271.0, 153.14285714285714], [263.0, 135.44444444444446], [259.0, 175.5], [257.0, 148.0], [269.0, 126.0], [267.0, 111.75], [266.0, 106.5], [265.0, 88.8], [264.0, 84.0], [284.0, 164.0], [286.0, 1081.5430463576163], [287.0, 236.66666666666666], [285.0, 815.1666666666666], [282.0, 1108.0], [278.0, 825.6666666666667], [281.0, 183.33333333333334], [276.0, 212.66666666666666], [273.0, 204.0], [272.0, 122.0], [291.0, 152.0], [301.0, 557.4], [300.0, 1197.6666666666667], [299.0, 891.1428571428572], [296.0, 1258.5], [295.0, 2264.5], [294.0, 164.5], [297.0, 161.0], [289.0, 137.33333333333334], [288.0, 171.0], [307.0, 865.8], [319.0, 809.0], [317.0, 1231.8], [313.0, 741.0], [314.0, 177.0], [311.0, 2292.0], [310.0, 1763.0], [309.0, 143.5], [308.0, 175.0], [306.0, 1559.0], [304.0, 840.2], [316.0, 178.5], [323.0, 723.7142857142857], [334.0, 645.25], [332.0, 1790.5], [328.0, 1202.8333333333335], [330.0, 163.5], [327.0, 2162.0], [325.0, 632.0], [322.0, 1559.0], [321.0, 1589.0], [333.0, 186.0], [350.0, 663.6666666666666], [351.0, 1585.0], [344.0, 191.0], [349.0, 2169.0], [346.0, 1662.5], [345.0, 178.0], [343.0, 1107.2], [341.0, 190.0], [340.0, 166.0], [339.0, 2031.5], [337.0, 1235.5], [336.0, 188.0], [348.0, 157.0], [354.0, 810.6666666666667], [365.0, 592.2], [367.0, 787.0], [361.0, 184.66666666666666], [364.0, 20.0], [363.0, 2182.5], [362.0, 146.0], [359.0, 2163.25], [358.0, 686.25], [357.0, 203.0], [353.0, 1653.5], [352.0, 1205.0], [370.0, 1164.5], [383.0, 1153.5], [382.0, 1698.5], [377.0, 2192.0], [376.0, 214.0], [375.0, 1685.6], [373.0, 94.0], [372.0, 212.0], [368.0, 1753.6666666666667], [380.0, 216.5], [371.0, 212.0], [378.0, 216.5], [394.0, 452.625], [388.0, 2061.0], [387.0, 536.6666666666666], [386.0, 1822.0], [385.0, 536.3333333333334], [384.0, 1111.0], [397.0, 171.0], [412.0, 154.0], [407.0, 2093.0], [413.0, 153.0], [411.0, 153.66666666666666], [408.0, 152.0], [406.0, 150.5], [404.0, 141.5], [402.0, 146.0], [400.0, 145.0], [431.0, 2094.0], [425.0, 665.0], [429.0, 166.0], [426.0, 163.0], [424.0, 163.0], [423.0, 161.0], [422.0, 160.5], [421.0, 159.5], [418.0, 157.5], [416.0, 154.0], [445.0, 1128.5714285714287], [446.0, 1267.75], [444.0, 917.5], [443.0, 1020.0], [442.0, 1610.913043478261], [438.0, 1064.0], [432.0, 171.0], [434.0, 2042.0], [440.0, 179.66666666666666], [437.0, 176.0], [436.0, 174.25], [460.0, 1006.0], [448.0, 432.3333333333333], [451.0, 186.0], [463.0, 196.5], [461.0, 170.0], [459.0, 194.0], [458.0, 193.5], [457.0, 191.0], [455.0, 191.66666666666666], [452.0, 191.0], [472.0, 1987.0], [467.0, 159.6], [465.0, 160.0], [466.0, 159.66666666666666], [468.0, 142.0], [470.0, 143.25], [469.0, 126.0], [464.0, 198.0], [488.0, 1004.0], [480.0, 1004.0], [507.0, 998.0], [497.0, 1984.0], [543.0, 971.1666666666666], [542.0, 969.25], [541.0, 971.25], [540.0, 1626.2619047619053], [539.0, 1776.5], [530.0, 988.0], [522.0, 989.0], [516.0, 994.0], [572.0, 1828.0], [574.0, 926.5], [560.0, 203.5], [569.0, 1406.3333333333333], [551.0, 885.7777777777778], [550.0, 1664.25], [549.0, 934.0], [548.0, 1532.6], [545.0, 1348.0], [547.0, 938.0], [546.0, 939.0], [559.0, 1815.6666666666667], [544.0, 1000.6666666666666], [567.0, 1750.0], [565.0, 848.0], [562.0, 98.0], [561.0, 1111.25], [558.0, 1326.142857142857], [555.0, 1731.375], [556.0, 1277.6], [557.0, 1946.0], [554.0, 1229.625], [552.0, 1182.0], [553.0, 917.6], [606.0, 1717.0], [607.0, 1014.0], [604.0, 1925.6666666666667], [601.0, 1565.5], [599.0, 182.0], [598.0, 1433.0], [594.0, 1735.0], [593.0, 1938.0], [591.0, 1817.5], [578.0, 1362.25], [582.0, 2110.3333333333335], [580.0, 235.0], [587.0, 1694.0], [585.0, 217.0], [637.0, 1514.25], [639.0, 1084.0], [633.0, 1160.4], [628.0, 1926.3333333333333], [625.0, 1990.0], [624.0, 1129.5], [620.0, 1841.3333333333333], [617.0, 1745.0], [615.0, 952.5], [614.0, 1930.0], [612.0, 939.5], [610.0, 975.5], [608.0, 1840.5], [646.0, 1203.6666666666667], [669.0, 1295.3333333333335], [666.0, 958.75], [662.0, 1014.5], [658.0, 1203.0], [655.0, 2057.0], [654.0, 198.0], [653.0, 1895.0], [649.0, 1845.6666666666667], [644.0, 234.0], [642.0, 1740.6666666666667], [702.0, 198.5], [703.0, 933.0], [701.0, 1667.0], [698.0, 641.75], [694.0, 1839.5], [692.0, 1113.0], [690.0, 2001.0], [687.0, 144.0], [672.0, 830.3333333333334], [675.0, 1113.5], [674.0, 926.5], [678.0, 1895.0], [676.0, 1679.0], [686.0, 1841.5], [684.0, 1284.0], [681.0, 677.6666666666666], [734.0, 684.3333333333333], [735.0, 916.5], [730.0, 2068.0], [728.0, 199.0], [727.0, 809.6666666666667], [724.0, 1404.0], [720.0, 188.0], [717.0, 1820.0], [708.0, 796.3333333333333], [707.0, 1529.0], [710.0, 1690.0], [709.0, 229.0], [715.0, 1439.3333333333335], [713.0, 183.0], [712.0, 172.0], [755.0, 201.0], [766.0, 1598.5], [764.0, 2062.0], [761.0, 201.0], [760.0, 1080.5], [749.0, 895.0], [738.0, 1671.0], [743.0, 650.75], [739.0, 2068.0], [748.0, 2062.0], [747.0, 1646.0], [745.0, 1133.0], [759.0, 1668.0], [758.0, 142.0], [756.0, 1816.0], [754.0, 2064.0], [752.0, 775.0], [796.0, 675.3333333333334], [799.0, 653.3333333333333], [793.0, 2051.0], [792.0, 545.75], [788.0, 1113.0], [786.0, 186.5], [785.0, 1158.3333333333333], [782.0, 172.0], [769.0, 1259.3333333333335], [774.0, 917.0], [773.0, 1199.6666666666667], [781.0, 923.5], [777.0, 1756.6666666666667], [830.0, 206.5], [831.0, 1621.0], [816.0, 168.0], [829.0, 1594.0], [828.0, 205.5], [826.0, 894.5], [824.0, 175.0], [815.0, 1108.5], [802.0, 171.0], [801.0, 2082.0], [807.0, 2046.0], [806.0, 483.6], [814.0, 1320.0], [811.0, 1759.0], [810.0, 2013.0], [821.0, 1824.0], [820.0, 198.0], [819.0, 888.5], [818.0, 1629.0], [863.0, 1111.3333333333333], [852.0, 1834.0], [860.0, 991.5], [858.0, 895.8333333333334], [856.0, 167.0], [846.0, 1467.5], [832.0, 1591.0], [835.0, 883.0], [834.0, 1826.5], [839.0, 927.5], [838.0, 272.0], [842.0, 1387.6666666666665], [840.0, 198.0], [855.0, 1115.5], [853.0, 1603.6666666666667], [851.0, 192.0], [849.0, 1011.75], [857.0, 204.0], [888.0, 1711.3333333333333], [892.0, 1138.5], [895.0, 174.0], [891.0, 234.5], [885.0, 1900.5], [881.0, 1563.5], [877.0, 782.6666666666667], [865.0, 1777.5], [867.0, 1108.5], [866.0, 143.0], [871.0, 185.0], [869.0, 2033.5], [875.0, 1561.0], [873.0, 2033.0], [924.0, 857.5], [927.0, 1243.3333333333335], [922.0, 1075.5], [920.0, 1515.5], [918.0, 232.0], [917.0, 193.66666666666666], [914.0, 1845.0], [911.0, 159.0], [898.0, 145.0], [897.0, 1546.0], [902.0, 670.3333333333334], [899.0, 1122.5], [910.0, 1162.5], [908.0, 1423.6666666666667], [906.0, 145.0], [904.0, 1559.0], [958.0, 611.5], [959.0, 166.0], [954.0, 621.0], [952.0, 782.0], [949.0, 1093.5], [948.0, 162.0], [946.0, 623.0], [943.0, 1094.5], [930.0, 623.3333333333333], [934.0, 618.6666666666667], [931.0, 158.0], [942.0, 854.5], [939.0, 1094.5], [937.0, 783.3333333333334], [989.0, 1448.4827586206895], [986.0, 880.8333333333334], [988.0, 1234.4], [987.0, 1050.0], [985.0, 1320.75], [981.0, 1183.0833333333333], [980.0, 1445.3461538461538], [984.0, 1162.7142857142858], [975.0, 1236.6666666666667], [962.0, 621.6666666666666], [966.0, 167.33333333333334], [964.0, 1533.0], [973.0, 1530.0], [972.0, 167.0], [971.0, 1067.5], [968.0, 1069.5], [979.0, 1317.7857142857144], [990.0, 1682.0], [977.0, 140.0], [983.0, 1225.7333333333333], [982.0, 1291.7272727272727], [1020.0, 1373.6], [1011.0, 1653.0], [1022.0, 1388.0], [1023.0, 1043.0], [1009.0, 746.5], [1008.0, 968.6666666666667], [1021.0, 1062.0], [1017.0, 855.0], [1018.0, 823.5], [999.0, 1474.0], [1016.0, 1483.5], [998.0, 633.25], [997.0, 493.66666666666663], [996.0, 197.0], [995.0, 1067.5], [994.0, 1567.3333333333333], [993.0, 1309.4444444444443], [992.0, 1568.0], [1006.0, 752.375], [1007.0, 685.5], [1005.0, 1338.857142857143], [1002.0, 817.75], [1003.0, 1743.0], [1001.0, 1377.2857142857144], [1000.0, 853.5], [1015.0, 951.3333333333334], [1014.0, 1437.0], [1013.0, 1066.0], [1012.0, 1067.0], [1084.0, 569.0], [1058.0, 1486.5], [1068.0, 1634.0], [1066.0, 1647.0], [1076.0, 939.3333333333334], [1074.0, 182.0], [1054.0, 553.25], [1024.0, 1369.75], [1026.0, 718.4], [1030.0, 856.3333333333333], [1028.0, 1312.0], [1032.0, 758.0], [1038.0, 1830.8], [1034.0, 459.4], [1050.0, 1658.3333333333333], [1046.0, 1041.0], [1042.0, 1109.3333333333333], [1070.0, 1633.0], [1148.0, 140.0], [1120.0, 868.5], [1128.0, 623.6666666666666], [1126.0, 1010.0], [1130.0, 133.0], [1140.0, 624.6666666666666], [1136.0, 1610.0], [1118.0, 1181.0], [1088.0, 166.33333333333334], [1096.0, 900.8], [1100.0, 867.5], [1110.0, 512.0], [1106.0, 1637.5], [1134.0, 1079.0], [1212.0, 1606.0], [1188.0, 190.0], [1186.0, 653.6666666666666], [1192.0, 1085.6666666666667], [1214.0, 81.0], [1208.0, 94.0], [1204.0, 93.0], [1202.0, 287.5], [1166.0, 99.0], [1164.0, 562.0], [1162.0, 1588.0], [1158.0, 1294.6], [1152.0, 58.0], [1182.0, 155.5], [1180.0, 152.0], [1176.0, 559.0], [1172.0, 678.6666666666667], [1266.0, 360.0], [1272.0, 391.5], [1276.0, 106.5], [1274.0, 106.0], [1230.0, 1572.0], [1228.0, 918.75], [1226.0, 785.0], [1224.0, 834.3333333333333], [1222.0, 498.9166666666667], [1220.0, 1198.0], [1246.0, 867.3333333333333], [1262.0, 20.0], [1254.0, 1179.0], [1260.0, 860.6666666666667], [1258.0, 101.0], [1242.0, 559.25], [1232.0, 1557.5], [1238.0, 101.66666666666667], [1240.0, 1157.0], [1330.0, 576.2], [1340.0, 242.0], [1342.0, 246.0], [1338.0, 507.0], [1306.0, 1168.0], [1292.0, 1196.6666666666667], [1290.0, 49.0], [1294.0, 1585.0], [1282.0, 116.0], [1280.0, 114.0], [1286.0, 145.5], [1284.0, 117.5], [1310.0, 57.0], [1308.0, 862.0], [1296.0, 1235.0], [1302.0, 1526.6666666666667], [1300.0, 53.0], [1304.0, 55.0], [1336.0, 1158.0], [1324.0, 265.0], [1320.0, 414.0], [1316.0, 255.50000000000003], [1318.0, 60.0], [1312.0, 237.0], [1350.0, 663.0], [1352.0, 265.0], [1346.0, 1062.0], [1348.0, 1089.5], [1354.0, 580.3333333333334], [1356.0, 547.5], [1366.0, 160.0], [1368.0, 300.0], [1380.0, 773.5], [1358.0, 1069.0], [1370.0, 693.5], [1372.0, 307.0], [1362.0, 463.0], [1360.0, 674.0], [1374.0, 608.0], [1364.0, 463.3333333333333], [1378.0, 389.0], [1376.0, 572.0], [1081.0, 963.6666666666667], [1085.0, 1323.5], [1063.0, 1228.2], [1059.0, 1315.5], [1083.0, 1004.0], [1079.0, 919.3333333333333], [1073.0, 1620.5], [1025.0, 1355.0], [1027.0, 1696.25], [1029.0, 1226.0], [1033.0, 1053.0], [1031.0, 1699.0], [1039.0, 935.4], [1037.0, 1939.0], [1047.0, 1339.5], [1045.0, 1341.5], [1041.0, 1049.0], [1069.0, 459.6666666666667], [1145.0, 702.0], [1151.0, 565.75], [1125.0, 895.6666666666667], [1123.0, 1012.0], [1129.0, 1612.0], [1147.0, 1628.0], [1143.0, 1606.0], [1139.0, 102.0], [1091.0, 1610.0], [1093.0, 1327.5], [1099.0, 100.0], [1103.0, 1022.0], [1101.0, 1305.5], [1115.0, 1329.2], [1107.0, 573.0], [1135.0, 971.0], [1213.0, 916.0], [1215.0, 1274.0], [1185.0, 156.0], [1189.0, 91.0], [1197.0, 843.0], [1193.0, 1610.0], [1211.0, 1576.0], [1209.0, 589.3333333333333], [1207.0, 920.0], [1201.0, 954.0], [1167.0, 864.5], [1161.0, 143.0], [1157.0, 987.0], [1177.0, 404.33333333333337], [1171.0, 144.0], [1267.0, 1175.0], [1279.0, 543.0], [1275.0, 106.0], [1231.0, 900.0], [1271.0, 105.0], [1269.0, 1554.0], [1225.0, 384.0], [1223.0, 762.7499999999999], [1221.0, 720.6666666666666], [1247.0, 102.0], [1219.0, 833.5], [1217.0, 504.5], [1245.0, 1557.0], [1263.0, 942.3333333333333], [1261.0, 621.0], [1253.0, 101.0], [1251.0, 823.5], [1257.0, 58.0], [1255.0, 1233.0], [1249.0, 698.6666666666667], [1237.0, 436.0], [1235.0, 1573.0], [1239.0, 1562.0], [1335.0, 2.0], [1339.0, 443.0], [1331.0, 12.0], [1341.0, 787.0], [1337.0, 229.5], [1329.0, 139.5], [1289.0, 578.3333333333334], [1293.0, 1533.0], [1295.0, 883.0], [1287.0, 422.0], [1311.0, 548.0], [1307.0, 1194.5], [1297.0, 235.5], [1299.0, 52.0], [1305.0, 1545.0], [1323.0, 73.5], [1321.0, 1506.0], [1317.0, 1165.0], [1315.0, 806.0], [1313.0, 59.0], [1319.0, 1171.5], [1343.0, 249.0], [1349.0, 259.0], [1375.0, 952.3333333333333], [1345.0, 522.0], [1351.0, 262.0], [1347.0, 258.0], [1353.0, 1067.0], [1357.0, 338.0], [1355.0, 271.0], [1369.0, 352.0], [1367.0, 728.6666666666667], [1365.0, 293.5], [1381.0, 818.5], [1373.0, 101.45714285714284], [1371.0, 166.0], [1363.0, 638.75], [1361.0, 464.66666666666663], [1379.0, 392.0], [1359.0, 276.0], [1377.0, 765.25], [1.0, 9.533333333333335]], "isOverall": false, "label": "number conversion api", "isController": false}, {"data": [[359.4287999999994, 467.89799999999883]], "isOverall": false, "label": "number conversion api-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1381.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11928.0, "minX": 1.592871E12, "maxY": 23536.5, "series": [{"data": [[1.592871E12, 23536.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.592871E12, 11928.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.592871E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 467.89799999999883, "minX": 1.592871E12, "maxY": 467.89799999999883, "series": [{"data": [[1.592871E12, 467.89799999999883]], "isOverall": false, "label": "number conversion api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.592871E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 410.79320000000104, "minX": 1.592871E12, "maxY": 410.79320000000104, "series": [{"data": [[1.592871E12, 410.79320000000104]], "isOverall": false, "label": "number conversion api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.592871E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 78.96079999999976, "minX": 1.592871E12, "maxY": 78.96079999999976, "series": [{"data": [[1.592871E12, 78.96079999999976]], "isOverall": false, "label": "number conversion api", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.592871E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.592871E12, "maxY": 2389.0, "series": [{"data": [[1.592871E12, 2389.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.592871E12, 1.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.592871E12, 1.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.592871E12, 1.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.592871E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.592871E12, 106.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.592871E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 726.0, "maxY": 1039.5, "series": [{"data": [[1266.0, 33.0], [1251.0, 109.0], [726.0, 1039.5], [1757.0, 204.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1266.0, 28.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1757.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 726.0, "maxY": 1039.5, "series": [{"data": [[1266.0, 33.0], [1251.0, 109.0], [726.0, 1039.5], [1757.0, 171.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1266.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1757.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.592871E12, "maxY": 83.33333333333333, "series": [{"data": [[1.592871E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.592871E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.592871E12, "maxY": 82.83333333333333, "series": [{"data": [[1.592871E12, 82.83333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.592871E12, 0.5]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.592871E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.592871E12, "maxY": 82.83333333333333, "series": [{"data": [[1.592871E12, 82.83333333333333]], "isOverall": false, "label": "number conversion api-success", "isController": false}, {"data": [[1.592871E12, 0.5]], "isOverall": false, "label": "number conversion api-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.592871E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.592871E12, "maxY": 82.83333333333333, "series": [{"data": [[1.592871E12, 82.83333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.592871E12, 0.5]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.592871E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

